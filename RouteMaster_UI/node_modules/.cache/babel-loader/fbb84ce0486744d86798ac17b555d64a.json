{"ast":null,"code":"// export default class FlightServiceRest{\n//     constructor(){\n//         this.uri = \"http://localhost:8980/bus\";\n//         this.flights = [];\n//     }\n//     // Service method to fetch all flights\n//     async getFlights() {\n//         return await fetch(this.uri + \"/fetchall\").then(response => {\n//            if(!response.ok) {\n//                this.handleResponseError(response);\n//            }\n//            return response.json();\n//        }).then(data => {  \n//            console.log(\"flights data from service\" + data);          \n//            return data;\n//        }).catch(error => {\n//            console.log(\"Error : \"  + error.message)\n//        })\n//    }\n//    // Service method to Add a new flight in the database\n//    async saveFlight(flight) {\n//         return await fetch(this.uri+\"/add\", {\n//             method:\"POST\",\n//             mode:\"cors\",\n//             headers: {\n//                 \"content-type\" : \"application/json\"\n//             },\n//             body:JSON.stringify(flight)\n//         }).then(response => {\n//         if(!response.ok) {\n//             this.handleResponseError(response);\n//         }\n//         return response.json();\n//         }).catch(error => {\n//             console.log(error.message);\n//         });\n//     }\n//     // Service method to make changes in an existing flight\n//     async updateFlight(flight){\n//         return await fetch(this.uri+\"/update\", {\n//             method:\"PUT\",\n//             mode:\"cors\",\n//             headers: {\n//                 \"content-type\" : \"application/json\"\n//             },\n//             body:JSON.stringify(flight)\n//         }).then(response => {\n//         if(!response.ok) {\n//             this.handleResponseError(response);\n//         }\n//         return response.json();\n//         }).catch(error => {\n//             console.log(\"Error : \" + error.message);\n//         });\n//     }\n//     // Service method to remove flight from database\n//     async deleteFlight(fid){\n//         return await fetch(this.uri + \"/remove/\"+ fid, {\n//             method:\"DELETE\",\n//             mode:\"cors\"\n//         }).then(response => {\n//             if(!response.ok) {\n//                 this.handleResponseError(response);\n//             }\n//             return response.json();\n//         }).catch(error => {\n//             console.log(\"Error : \" + error.message);\n//         })\n//     }\n//     // Service method to fetch flights on source, Destination and Date\n//     async getFlightsForUser(source, destination, date) {\n//         return await fetch(this.uri +\n//              `/fetch?source=${source}&destination=${destination}&date=${date}`)\n//         .then(response => {\n//            if(!response.ok) {\n//                this.handleResponseError(response);\n//            }\n//            return response.json();\n//        }).then(data => {  \n//            console.log(\"flights data from service\" + data);          \n//            return data;\n//        }).catch(error => {\n//            console.log(\"Error : \"  + error.message)\n//        })\n//    }\n// }\n\n/**\n* \n* Using inbuilt fetch API to send request to spring boot and fetch response\n* The service method handles CRUD opertion\n* \n*/\nexport default class BusServiceRest {\n  constructor() {\n    this.uri = \"http://localhost:8980/bus\";\n    this.buses = [];\n  } // Service method to fetch all buses\n\n\n  async getBuses() {\n    return await fetch(this.uri + \"/fetchall\").then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      console.log(\"buses data from service\" + data);\n      return data;\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  } // Service method to Add a new bus in the database\n\n\n  async saveBus(bus) {\n    return await fetch(this.uri + \"/add\", {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(bus)\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).catch(error => {\n      console.log(error.message);\n    });\n  } // Service method to make changes in an existing bus\n\n\n  async updateBus(bus) {\n    return await fetch(this.uri + \"/update\", {\n      method: \"PUT\",\n      mode: \"cors\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(bus)\n    }).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  } // Service method to remove bus from database\n\n\n  async deleteBus(fid) {\n    return await fetch(this.uri + \"/remove/\" + fid, {\n      method: \"DELETE\",\n      mode: \"cors\"\n    }).then(response => {\n      if (!response.ok) {\n        // this.handleResponseError(response);\n        console.log(response.status);\n      }\n\n      return response.json();\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  } // Service method to fetch buses on source, Destination and Date\n\n\n  async getBusesForUser(source, destination, date) {\n    return await fetch(this.uri + `/fetch?source=${source}&destination=${destination}&date=${date}`).then(response => {\n      if (!response.ok) {\n        this.handleResponseError(response);\n      }\n\n      return response.json();\n    }).then(data => {\n      console.log(\"buses data from service\" + data);\n      return data;\n    }).catch(error => {\n      console.log(\"Error : \" + error.message);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/2317761/OneDrive - Cognizant/BusEase-reactjs-springboot/RouteMaster_UI/src/services/BusServiceRest.js"],"names":["BusServiceRest","constructor","uri","buses","getBuses","fetch","then","response","ok","handleResponseError","json","data","console","log","catch","error","message","saveBus","bus","method","mode","headers","body","JSON","stringify","updateBus","deleteBus","fid","status","getBusesForUser","source","destination","date"],"mappings":"AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA,eAAe,MAAMA,cAAN,CAAoB;AAC/BC,EAAAA,WAAW,GAAE;AACT,SAAKC,GAAL,GAAW,2BAAX;AACA,SAAKC,KAAL,GAAa,EAAb;AACH,GAJ8B,CAM/B;;;AACc,QAARC,QAAQ,GAAG;AACb,WAAO,MAAMC,KAAK,CAAC,KAAKH,GAAL,GAAW,WAAZ,CAAL,CAA8BI,IAA9B,CAAmCC,QAAQ,IAAI;AACzD,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,KALa,EAKXJ,IALW,CAKNK,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BF,IAAxC;AACA,aAAOA,IAAP;AACH,KARa,EAQXG,KARW,CAQLC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAcE,KAAK,CAACC,OAAhC;AACH,KAVa,CAAb;AAWJ,GAnB+B,CAqBhC;;;AACa,QAAPC,OAAO,CAACC,GAAD,EAAM;AACd,WAAO,MAAMb,KAAK,CAAC,KAAKH,GAAL,GAAS,MAAV,EAAkB;AAChCiB,MAAAA,MAAM,EAAC,MADyB;AAEhCC,MAAAA,IAAI,EAAC,MAF2B;AAGhCC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OAHuB;AAMhCC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeN,GAAf;AAN2B,KAAlB,CAAL,CAOVZ,IAPU,CAOLC,QAAQ,IAAI;AACpB,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACC,KAZY,EAYVI,KAZU,CAYJC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,OAAlB;AACH,KAdY,CAAb;AAeH,GAtC8B,CAwC/B;;;AACe,QAATS,SAAS,CAACP,GAAD,EAAK;AAChB,WAAO,MAAMb,KAAK,CAAC,KAAKH,GAAL,GAAS,SAAV,EAAqB;AACnCiB,MAAAA,MAAM,EAAC,KAD4B;AAEnCC,MAAAA,IAAI,EAAC,MAF8B;AAGnCC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OAH0B;AAMnCC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeN,GAAf;AAN8B,KAArB,CAAL,CAOVZ,IAPU,CAOLC,QAAQ,IAAI;AACpB,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACC,KAZY,EAYVI,KAZU,CAYJC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaE,KAAK,CAACC,OAA/B;AACH,KAdY,CAAb;AAeH,GAzD8B,CA2D/B;;;AACe,QAATU,SAAS,CAACC,GAAD,EAAK;AAChB,WAAO,MAAMtB,KAAK,CAAC,KAAKH,GAAL,GAAW,UAAX,GAAuByB,GAAxB,EAA6B;AAC3CR,MAAAA,MAAM,EAAC,QADoC;AAE3CC,MAAAA,IAAI,EAAC;AAFsC,KAA7B,CAAL,CAGVd,IAHU,CAGLC,QAAQ,IAAI;AAChB,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACqB,MAArB;AACH;;AACD,aAAOrB,QAAQ,CAACG,IAAT,EAAP;AACH,KATY,EASVI,KATU,CASJC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAaE,KAAK,CAACC,OAA/B;AACH,KAXY,CAAb;AAYH,GAzE8B,CA2E/B;;;AACqB,QAAfa,eAAe,CAACC,MAAD,EAASC,WAAT,EAAsBC,IAAtB,EAA4B;AAC7C,WAAO,MAAM3B,KAAK,CAAC,KAAKH,GAAL,GACb,iBAAgB4B,MAAO,gBAAeC,WAAY,SAAQC,IAAK,EADnD,CAAL,CAEZ1B,IAFY,CAEPC,QAAQ,IAAI;AACf,UAAG,CAACA,QAAQ,CAACC,EAAb,EAAiB;AACb,aAAKC,mBAAL,CAAyBF,QAAzB;AACH;;AACD,aAAOA,QAAQ,CAACG,IAAT,EAAP;AACH,KAPa,EAOXJ,IAPW,CAONK,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BF,IAAxC;AACA,aAAOA,IAAP;AACH,KAVa,EAUXG,KAVW,CAULC,KAAK,IAAI;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAcE,KAAK,CAACC,OAAhC;AACH,KAZa,CAAb;AAaJ;;AA1F+B","sourcesContent":["\n// export default class FlightServiceRest{\n//     constructor(){\n//         this.uri = \"http://localhost:8980/bus\";\n//         this.flights = [];\n//     }\n\n//     // Service method to fetch all flights\n//     async getFlights() {\n//         return await fetch(this.uri + \"/fetchall\").then(response => {\n//            if(!response.ok) {\n//                this.handleResponseError(response);\n//            }\n//            return response.json();\n//        }).then(data => {  \n//            console.log(\"flights data from service\" + data);          \n//            return data;\n//        }).catch(error => {\n//            console.log(\"Error : \"  + error.message)\n//        })\n//    }\n\n//    // Service method to Add a new flight in the database\n//    async saveFlight(flight) {\n//         return await fetch(this.uri+\"/add\", {\n//             method:\"POST\",\n//             mode:\"cors\",\n//             headers: {\n//                 \"content-type\" : \"application/json\"\n//             },\n//             body:JSON.stringify(flight)\n//         }).then(response => {\n//         if(!response.ok) {\n//             this.handleResponseError(response);\n//         }\n//         return response.json();\n//         }).catch(error => {\n//             console.log(error.message);\n//         });\n//     }\n\n//     // Service method to make changes in an existing flight\n//     async updateFlight(flight){\n//         return await fetch(this.uri+\"/update\", {\n//             method:\"PUT\",\n//             mode:\"cors\",\n//             headers: {\n//                 \"content-type\" : \"application/json\"\n//             },\n//             body:JSON.stringify(flight)\n//         }).then(response => {\n//         if(!response.ok) {\n//             this.handleResponseError(response);\n//         }\n//         return response.json();\n//         }).catch(error => {\n//             console.log(\"Error : \" + error.message);\n//         });\n//     }\n\n//     // Service method to remove flight from database\n//     async deleteFlight(fid){\n//         return await fetch(this.uri + \"/remove/\"+ fid, {\n//             method:\"DELETE\",\n//             mode:\"cors\"\n//         }).then(response => {\n//             if(!response.ok) {\n//                 this.handleResponseError(response);\n//             }\n//             return response.json();\n//         }).catch(error => {\n//             console.log(\"Error : \" + error.message);\n//         })\n//     }\n\n//     // Service method to fetch flights on source, Destination and Date\n//     async getFlightsForUser(source, destination, date) {\n//         return await fetch(this.uri +\n//              `/fetch?source=${source}&destination=${destination}&date=${date}`)\n//         .then(response => {\n//            if(!response.ok) {\n//                this.handleResponseError(response);\n//            }\n//            return response.json();\n//        }).then(data => {  \n//            console.log(\"flights data from service\" + data);          \n//            return data;\n//        }).catch(error => {\n//            console.log(\"Error : \"  + error.message)\n//        })\n//    }\n// }\n\n\n\n/**\n* \n* Using inbuilt fetch API to send request to spring boot and fetch response\n* The service method handles CRUD opertion\n* \n*/\n\n\nexport default class BusServiceRest{\n    constructor(){\n        this.uri = \"http://localhost:8980/bus\";\n        this.buses = [];\n    }\n\n    // Service method to fetch all buses\n    async getBuses() {\n        return await fetch(this.uri + \"/fetchall\").then(response => {\n           if(!response.ok) {\n               this.handleResponseError(response);\n           }\n           return response.json();\n       }).then(data => {  \n           console.log(\"buses data from service\" + data);          \n           return data;\n       }).catch(error => {\n           console.log(\"Error : \"  + error.message)\n       })\n   }\n\n   // Service method to Add a new bus in the database\n   async saveBus(bus) {\n        return await fetch(this.uri+\"/add\", {\n            method:\"POST\",\n            mode:\"cors\",\n            headers: {\n                \"content-type\" : \"application/json\"\n            },\n            body:JSON.stringify(bus)\n        }).then(response => {\n        if(!response.ok) {\n            this.handleResponseError(response);\n        }\n        return response.json();\n        }).catch(error => {\n            console.log(error.message);\n        });\n    }\n\n    // Service method to make changes in an existing bus\n    async updateBus(bus){\n        return await fetch(this.uri+\"/update\", {\n            method:\"PUT\",\n            mode:\"cors\",\n            headers: {\n                \"content-type\" : \"application/json\"\n            },\n            body:JSON.stringify(bus)\n        }).then(response => {\n        if(!response.ok) {\n            this.handleResponseError(response);\n        }\n        return response.json();\n        }).catch(error => {\n            console.log(\"Error : \" + error.message);\n        });\n    }\n\n    // Service method to remove bus from database\n    async deleteBus(fid){\n        return await fetch(this.uri + \"/remove/\"+ fid, {\n            method:\"DELETE\",\n            mode:\"cors\"\n        }).then(response => {\n            if(!response.ok) {\n                // this.handleResponseError(response);\n                console.log(response.status);\n            }\n            return response.json();\n        }).catch(error => {\n            console.log(\"Error : \" + error.message);\n        })\n    }\n\n    // Service method to fetch buses on source, Destination and Date\n    async getBusesForUser(source, destination, date) {\n        return await fetch(this.uri +\n             `/fetch?source=${source}&destination=${destination}&date=${date}`)\n        .then(response => {\n           if(!response.ok) {\n               this.handleResponseError(response);\n           }\n           return response.json();\n       }).then(data => {  \n           console.log(\"buses data from service\" + data);          \n           return data;\n       }).catch(error => {\n           console.log(\"Error : \"  + error.message)\n       })\n   }\n}\n"]},"metadata":{},"sourceType":"module"}