{"ast":null,"code":"import axios from \"axios\";\nexport default class BookingService {\n  constructor() {\n    this.uri = \"http://localhost:8980/book\";\n  } // Service method to add booking \n\n\n  async addBooking(numberOfSeatsToBook, busNumber, source, destination, date) {\n    console.log(busNumber);\n    return await axios.post(this.uri + \"/booking\", {\n      numberOfSeatsToBook\n    }, {\n      params: {\n        \"fid\": busNumber,\n        \"source\": source,\n        \"destination\": destination,\n        \"date\": date\n      }\n    }).then(response => {\n      console.log(response.data);\n\n      if (response.data.length > 3) {\n        alert(response.data);\n        return response;\n      } else {\n        localStorage.setItem(\"bid\", parseInt(response.data));\n        return response;\n      }\n    });\n  } // Service method to add passengers\n\n\n  async addPassengers(pass1) {\n    return await axios.post(this.uri + \"/passenger/\" + localStorage.getItem(\"bid\"), pass1).then(response => {\n      console.log(response.data);\n    });\n  } // Service method to generate ticket \n\n\n  async generateTicket(ticket) {\n    const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\n    return await axios.post(this.uri + \"/ticket/\" + uid + \"/\" + localStorage.getItem(\"bid\") + \"/1\", ticket).then(response => {\n      console.log(response.data);\n      localStorage.setItem(\"ticket\", JSON.stringify(response.data));\n      return response;\n    });\n  } // Service method to fetch tickets based on userid\n\n\n  async getTickets() {\n    const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\n    return await axios.get(this.uri + \"/getTickets/\" + uid).then(response => {\n      console.log(response.data); // localStorage.setItem(\"tickets\",JSON.stringify(response.data))\n\n      return response;\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/2317761/OneDrive - Cognizant/BusEase-reactjs-springboot/RouteMaster_UI/src/services/BookingService.js"],"names":["axios","BookingService","constructor","uri","addBooking","numberOfSeatsToBook","busNumber","source","destination","date","console","log","post","params","then","response","data","length","alert","localStorage","setItem","parseInt","addPassengers","pass1","getItem","generateTicket","ticket","uid","JSON","parse","userId","stringify","getTickets","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,eAAe,MAAMC,cAAN,CAAqB;AAChCC,EAAAA,WAAW,GAAG;AACV,SAAKC,GAAL,GAAW,4BAAX;AACH,GAH+B,CAKhC;;;AACgB,QAAVC,UAAU,CAACC,mBAAD,EAAqBC,SAArB,EAA+BC,MAA/B,EAAsCC,WAAtC,EAAkDC,IAAlD,EAAwD;AACpEC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACA,WAAO,MAAMN,KAAK,CAACY,IAAN,CAAW,KAAKT,GAAL,GAAS,UAApB,EAA+B;AAACE,MAAAA;AAAD,KAA/B,EACb;AAACQ,MAAAA,MAAM,EAAC;AAAC,eAAMP,SAAP;AAAiB,kBAASC,MAA1B;AAAiC,uBAAcC,WAA/C;AAA2D,gBAAOC;AAAlE;AAAR,KADa,EACqEK,IADrE,CAC0EC,QAAQ,IAAI;AAC/FL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACC,IAArB;;AACA,UAAGD,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAqB,CAAxB,EAA0B;AACtBC,QAAAA,KAAK,CAACH,QAAQ,CAACC,IAAV,CAAL;AACA,eAAOD,QAAP;AACH,OAHD,MAGM;AACFI,QAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA2BC,QAAQ,CAACN,QAAQ,CAACC,IAAV,CAAnC;AACA,eAAOD,QAAP;AACH;AACJ,KAVY,CAAb;AAWH,GAnB+B,CAqBhC;;;AACmB,QAAbO,aAAa,CAACC,KAAD,EAAO;AACtB,WAAO,MAAMvB,KAAK,CAACY,IAAN,CAAW,KAAKT,GAAL,GAAS,aAAT,GAAuBgB,YAAY,CAACK,OAAb,CAAqB,KAArB,CAAlC,EAA8DD,KAA9D,EAAqET,IAArE,CAA0EC,QAAQ,IAAI;AAC/FL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACC,IAArB;AACH,KAFY,CAAb;AAGH,GA1B+B,CA4BhC;;;AACoB,QAAdS,cAAc,CAACC,MAAD,EAAQ;AACxB,UAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWV,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,EAAyCM,MAArD;AACA,WAAO,MAAM9B,KAAK,CAACY,IAAN,CAAW,KAAKT,GAAL,GAAS,UAAT,GAAoBwB,GAApB,GAAwB,GAAxB,GAA4BR,YAAY,CAACK,OAAb,CAAqB,KAArB,CAA5B,GAAwD,IAAnE,EAAwEE,MAAxE,EACZZ,IADY,CACPC,QAAQ,IAAI;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACC,IAArB;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA8BQ,IAAI,CAACG,SAAL,CAAehB,QAAQ,CAACC,IAAxB,CAA9B;AACA,aAAOD,QAAP;AACH,KALY,CAAb;AAMH,GArC+B,CAuChC;;;AACgB,QAAViB,UAAU,GAAG;AACf,UAAML,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWV,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,EAAyCM,MAArD;AACA,WAAO,MAAM9B,KAAK,CAACiC,GAAN,CAAU,KAAK9B,GAAL,GAAS,cAAT,GAAwBwB,GAAlC,EACZb,IADY,CACPC,QAAQ,IAAI;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAQ,CAACC,IAArB,EADc,CAEd;;AACA,aAAOD,QAAP;AACH,KALY,CAAb;AAMH;;AAhD+B","sourcesContent":["import axios from \"axios\";\n\n\nexport default class BookingService {\n    constructor() {\n        this.uri = \"http://localhost:8980/book\";\n    }\n\n    // Service method to add booking \n    async addBooking(numberOfSeatsToBook,busNumber,source,destination,date) {\n        console.log(busNumber)\n        return await axios.post(this.uri+\"/booking\",{numberOfSeatsToBook},\n        {params:{\"fid\":busNumber,\"source\":source,\"destination\":destination,\"date\":date}}).then(response => {\n            console.log(response.data)\n            if(response.data.length>3){\n                alert(response.data)\n                return response\n            } else{\n                localStorage.setItem(\"bid\",parseInt(response.data))\n                return response\n            }\n        })\n    }\n\n    // Service method to add passengers\n    async addPassengers(pass1){\n        return await axios.post(this.uri+\"/passenger/\"+localStorage.getItem(\"bid\"),pass1).then(response => {\n            console.log(response.data)\n        })\n    }\n\n    // Service method to generate ticket \n    async generateTicket(ticket){\n        const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\n        return await axios.post(this.uri+\"/ticket/\"+uid+\"/\"+localStorage.getItem(\"bid\")+\"/1\",ticket)\n        .then(response => {\n            console.log(response.data)\n            localStorage.setItem(\"ticket\",JSON.stringify(response.data))\n            return response;\n        })\n    }\n\n    // Service method to fetch tickets based on userid\n    async getTickets() {\n        const uid = JSON.parse(localStorage.getItem(\"user\")).userId;\n        return await axios.get(this.uri+\"/getTickets/\"+uid)\n        .then(response => {\n            console.log(response.data)\n            // localStorage.setItem(\"tickets\",JSON.stringify(response.data))\n            return response;\n        })\n    }\n\n}"]},"metadata":{},"sourceType":"module"}